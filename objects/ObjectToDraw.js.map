{"version":3,"file":"ObjectToDraw.js","sourceRoot":"","sources":["ObjectToDraw.ts"],"names":[],"mappings":"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","sourcesContent":["import { createProgramFromShaders } from \"../Utils\";\r\n\r\ntype Properties = {\r\n    width: number;\r\n    color?: Array<number>;\r\n    scale: Array<number>;\r\n    rotation: number;\r\n    translation: Array<number>;\r\n}\r\n\r\nimport vertexShader from \"../shaders/object_to_draw_vert.glsl.js\";\r\nimport fragmentShader from \"../shaders/object_to_draw_frag.glsl.js\";\r\n\r\nexport default class ObjectToDraw {\r\n    private readonly _gl: WebGLRenderingContext;\r\n    private readonly _properties: Properties;\r\n    private readonly _shaderProgram: WebGLProgram;\r\n    private readonly _buffers: Map<string, any>;\r\n    private readonly _attributes: Map<string, any>;\r\n    private readonly _uniforms: Map<string, any>;\r\n\r\n    constructor (gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n        this._properties = {\r\n            width: 300,\r\n            // color: [0.25, 0.45, 0.9, 1],\r\n            scale: [1, 1],\r\n            rotation: 0,\r\n            translation: [400, 400]\r\n        };\r\n        this._shaderProgram = createProgramFromShaders(this._gl, vertexShader, fragmentShader) as WebGLProgram;\r\n        this._buffers = new Map();\r\n        this._attributes = new Map();\r\n        this._uniforms = new Map();\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     */\r\n    init () {\r\n        // Getting attributes/uniforms locations in shader\r\n        this._attributes.set('a_position', this._gl.getAttribLocation(this._shaderProgram, 'a_position'));\r\n        this._uniforms.set('u_resolution', this._gl.getUniformLocation(this._shaderProgram, 'u_resolution'));\r\n        // this._uniforms.set('u_color', this._gl.getUniformLocation(this._shaderProgram, 'u_color'));\r\n        this._uniforms.set('u_scale', this._gl.getUniformLocation(this._shaderProgram, 'u_scale'));\r\n        this._uniforms.set('u_rotation', this._gl.getUniformLocation(this._shaderProgram, 'u_rotation'));\r\n        this._uniforms.set('u_translation', this._gl.getUniformLocation(this._shaderProgram, 'u_translation'));\r\n        // Creating buffers\r\n        this._buffers.set('position_buffer', this._gl.createBuffer());\r\n        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._buffers.get('position_buffer'));\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array([\r\n            0, 0,\r\n            0, this._properties.width,\r\n            this._properties.width, 0,\r\n            this._properties.width, 0,\r\n            0, this._properties.width,\r\n            this._properties.width, this._properties.width\r\n        ]), this._gl.STATIC_DRAW);\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     */\r\n    render () {\r\n        this.calcAnimation();\r\n\r\n        this._gl.useProgram(this._shaderProgram);\r\n        // for (let attribute of this._attributes.values()) {}\r\n        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._buffers.get('position_buffer'));\r\n        this._gl.vertexAttribPointer(this._attributes.get('a_position'), 2, this._gl.FLOAT, false, 0, 0);\r\n        this._gl.enableVertexAttribArray(this._attributes.get('a_position'));\r\n        // for (let uniform of this._uniforms.values()) {}\r\n        this._gl.uniform2fv(this._uniforms.get('u_resolution'), [this._gl.canvas.width, this._gl.canvas.height]);\r\n        // this._gl.uniform4fv(this._uniforms.get('u_color'), this._properties.color);\r\n        this._gl.uniform2fv(this._uniforms.get('u_scale'), this._properties.scale);\r\n        this._gl.uniform2fv(this._uniforms.get('u_rotation'), this.getRotation(this._properties.rotation));\r\n        this._gl.uniform2fv(this._uniforms.get('u_translation'), this._properties.translation);\r\n\r\n        this._gl.drawArrays(this._gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    calcAnimation () {\r\n        this._properties.rotation += 0.05;\r\n    }\r\n\r\n    getRotation (angleInDegrees: number) {\r\n        const angleInRadians = angleInDegrees * Math.PI / 180;\r\n        const sin = Math.sin(angleInRadians);\r\n        const cos = Math.cos(angleInRadians);\r\n        return [sin, cos];\r\n    }\r\n}\r\n"]}