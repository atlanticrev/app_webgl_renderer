{"version":3,"file":"WebGLRenderer.js","sourceRoot":"","sources":["WebGLRenderer.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,aAAa,CAAC;AACjC,6CAA6C;AAC7C,OAAO,YAAY,MAAM,wBAAwB,CAAC;AAElD,MAAM,CAAC,OAAO,OAAO,aAAa;IAM9B;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAA0B,CAAC;QACjE,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACH,YAAY;QACR;;;;WAIG;QACH,8BAA8B;QAC9B,wBAAwB;QAExB,sDAAsD;QACtD,iCAAiC;QACjC,kCAAkC;QAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEjE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,eAAe;QACX,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxE,CAAC;IAED;;;OAGG;IACH,cAAc;QACV,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACZ,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxE,CAAC;IAED;;;OAGG;IACH,OAAO;QACH,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IAC3D,CAAC;CACJ","sourcesContent":["import Canvas from \"./Canvas.js\";\r\n// @todo pass objects to draw through options\r\nimport ObjectToDraw from \"./objects/ObjectToDraw\";\r\n\r\nexport default class WebGLRenderer {\r\n    private readonly _canvas: Canvas;\r\n    private readonly _gl: WebGLRenderingContext;\r\n    private readonly _objectsToDraw: Array<ObjectToDraw>;\r\n    private _animationFrame: number;\r\n\r\n    constructor () {\r\n        this._canvas = new Canvas();\r\n        this._gl = this._canvas.getCtx('webgl') as WebGLRenderingContext;\r\n        this._objectsToDraw = [new ObjectToDraw(this._gl)];\r\n        this._animationFrame = -1;\r\n        this._renderIteration = this._renderIteration.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @returns void\r\n     * @private\r\n     */\r\n    _setViewport () {\r\n        /**\r\n         * Setting up viewport\r\n         * (Canvas bounding box, canvas render area and gl.viewport must be in sync)\r\n         * (Viewport clearing)\r\n         */\r\n        // Moved to constructor (temp)\r\n        // this._resizeCanvas();\r\n\r\n        // This tells WebGL the (-1 <-> +1) clip space maps to\r\n        // (0 <-> gl.canvas.width) for x,\r\n        // (gl.canvas.height <-> 0) for y.\r\n        this._gl.viewport(0, 0, this._canvas.width, this._canvas.height);\r\n\r\n        this._gl.clearColor(0, 0, 0, 0);\r\n        this._gl.clear(this._gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    /**\r\n     * @returns void\r\n     * @public\r\n     */\r\n    startRenderLoop () {\r\n        this.stopRenderLoop();\r\n        this._animationFrame = requestAnimationFrame(this._renderIteration);\r\n    }\r\n\r\n    /**\r\n     * @returns void\r\n     * @public\r\n     */\r\n    stopRenderLoop () {\r\n        cancelAnimationFrame(this._animationFrame);\r\n    }\r\n\r\n    /**\r\n     * @returns void\r\n     * @private\r\n     */\r\n    _renderIteration () {\r\n        this._render();\r\n        this._animationFrame = requestAnimationFrame(this._renderIteration);\r\n    }\r\n\r\n    /**\r\n     * @returns void\r\n     * @private\r\n     */\r\n    _render () {\r\n        this._canvas.resize();\r\n        this._setViewport();\r\n        this._objectsToDraw.forEach(object => object.render());\r\n    }\r\n}\r\n"]}